# -*- coding: utf-8 -*-
"""
Some quicn and dirty exploratory analysis of the dataset.
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

plt.close()

#%% A =========================================================================
"""
 Column Description:
    
 Timestamp			            Timestamps, 15min resolution
 Generation_kW			        Power generated by PV plant in kW
 Grid_Feed-In_kW			    Power fed back to the grid in kW		
 Grid_Supply_kW                 Power drawn from the grid in kW
 Overall_Consumption_Calc_kW	Calculated (!) local power consumption (see below)

 Calculation of Overall_Consumption_Calc_kW:

     Overall_Consumption_Calc_kW = Generation_kW - Grid_Feed-In_kW + Grid_Supply_kW

 The power values in kW refer to the average over the 15min period.
"""
df = pd.read_csv('data/A.csv')
df.index = pd.to_datetime(df.Timestamp)
df["Self_Consumption_kW"] = df.Generation_kW - df["Grid_Feed-In_kW"]
df["Excess_Grid_Supply"] = df["Overall_Consumption_Calc_kW"] - df["Self_Consumption_kW"]
df["Excess_Power_Generation"] = df["Generation_kW"] -  df["Self_Consumption_kW"]
fig = plt.figure(999)
fig.clear()
ax = fig.gca()
df.plot(ax = ax)


#%%
# Aggregate in kWh per day
dailyMaxPower = df.resample('D').max()
dailyEnergy = df.resample('D').sum() / 4 # kWh

# Baseline
print('Baseline self consumption: ', dailyEnergy.Self_Consumption_kW.sum()/dailyEnergy.Generation_kW.sum()*100, '%')
print('Baseline self-reliance: ', dailyEnergy.Self_Consumption_kW.sum()/dailyEnergy.Overall_Consumption_Calc_kW.sum()*100, '%')


#%% Looking at excess grid supply and excess energy consumption
fig = plt.figure(1)
fig.clear()
ax = fig.gca()
dailyEnergy.Excess_Grid_Supply.hist(bins=25, ax=ax)
plt.title('Excess_Grid_Supply [kWh]')

fig = plt.figure(2)
fig.clear()
ax = fig.gca()
dailyEnergy.Excess_Power_Generation.hist(bins=25, ax=ax)
plt.title('Excess_Power_Generation [kWh]')

fig = plt.figure(3)
fig.clear()
ax = fig.gca()
dailyMaxPower.Excess_Grid_Supply.hist(bins=25, ax=ax)
plt.title('Excess_Grid_Supply [kW]')

fig = plt.figure(4)
fig.clear()
ax = fig.gca()
plt.scatter(dailyEnergy.Excess_Grid_Supply, dailyMaxPower.Excess_Grid_Supply)
plt.xlabel('Excess Energy (kWh)')
plt.ylabel('Max. Power (kW)')

fig = plt.figure(5)
fig.clear()
ax = fig.gca()
plt.scatter(dailyEnergy.Excess_Grid_Supply, dailyEnergy.Excess_Power_Generation)
plt.plot(np.arange(0,160), np.arange(0, 160), color='black')
plt.xlabel('Supply (kWh)')
plt.ylabel('Excess Generation (kW)')


#%% Potential
print('Yearly excess grid supply:', dailyEnergy.Excess_Grid_Supply.sum(), 'kWh')

# Daily potential
dailyEnergy['SelfSupplyPotential'] = dailyEnergy.Excess_Power_Generation / dailyEnergy.Excess_Grid_Supply
fig = plt.figure(10)
fig.clear()
ax = fig.gca()
dailyEnergy.SelfSupplyPotential.hist(bins=100, ax=ax)
plt.title('SelfSupplyPotential')

print('Excess generation can cover excess supply on ', dailyEnergy[dailyEnergy.SelfSupplyPotential > 1].shape[0], 'days.' )


#%% Battery ratings

class Battery:
    energy = 0 # Energy in kWh
    
b = Battery
b.energy = 100



dfBat = dailyEnergy
dfBat['maxStoredEnergy'] = dfBat["Excess_Power_Generation"].clip(upper=b.energy)
dfBat['remainingGridSupply'] = dfBat["Excess_Grid_Supply"] - dfBat['maxStoredEnergy']
fig = plt.figure(20)
fig.clear()
ax = fig.gca()
dfBat['remainingGridSupply'].hist(bins=25, ax=ax)
plt.xlabel("Remaining Grid Supply (kWh)")
plt.xlim((-200, 200))
dfBat['remainingGridSupply'].clip(lower=0, inplace=True)


def calcLocalUsage(df, capacity):
    dfBat = dailyEnergy
    dfBat['maxStoredEnergy'] = dfBat["Excess_Power_Generation"].clip(upper=capacity)
    dfBat['remainingGridSupply'] = dfBat["Excess_Grid_Supply"] - dfBat['maxStoredEnergy']
    dfBat['remainingGridSupply'].clip(lower=0, inplace=True)
    
    selfConsumptionRatio = sum(dfBat.Overall_Consumption_Calc_kW - dfBat.remainingGridSupply)/dfBat.Generation_kW.sum()
    selfRelianceRatio   = sum(dfBat.Overall_Consumption_Calc_kW - dfBat.remainingGridSupply)/dfBat.Overall_Consumption_Calc_kW.sum()

    return [selfConsumptionRatio, selfRelianceRatio]


selfConsumptionRatios = []
selfRelianceRatios = []
capacityRange = np.arange(0, 200)
for capacity in capacityRange:
    res = calcLocalUsage(dfBat, capacity)
    selfConsumptionRatios.append(res[0])
    selfRelianceRatios.append(res[1])
    
fig = plt.figure(21)
fig.clear()
plt.plot(capacityRange, selfConsumptionRatios, label="self-consumption ratio")
plt.plot(capacityRange, selfRelianceRatios, label="self-reliance ratio")
plt.xlabel("battery capacity (kWh)")
plt.legend()
plt.ylim((0,1))
plt.grid()










